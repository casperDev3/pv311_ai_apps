# –Ü–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –±—ñ–±–ª—ñ–æ—Ç–µ–∫
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import pandas as pd
from matplotlib.patches import Circle
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é
plt.style.use('seaborn-v0_8-darkgrid')
sns.set_palette("husl")


# 1. –õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
def create_gradient_line_plot():
    x = np.linspace(0, 10, 100)
    y1 = np.sin(x) * np.exp(-x / 10)
    y2 = np.cos(x) * np.exp(-x / 8)

    fig, ax = plt.subplots(figsize=(12, 6))

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω—É
    gradient = np.linspace(0, 1, 256).reshape(1, -1)
    ax.imshow(gradient, extent=[0, 10, -1, 1], aspect='auto', alpha=0.3, cmap='viridis')

    ax.plot(x, y1, linewidth=3, label='sin(x)√óe^(-x/10)', color='#FF6B6B')
    ax.plot(x, y2, linewidth=3, label='cos(x)√óe^(-x/8)', color='#4ECDC4')

    ax.set_xlabel('X –∑–Ω–∞—á–µ–Ω–Ω—è', fontsize=14, fontweight='bold')
    ax.set_ylabel('Y –∑–Ω–∞—á–µ–Ω–Ω—è', fontsize=14, fontweight='bold')
    ax.set_title('–ó–∞—Ç—É—Ö–∞—é—á—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–∏–º —Ñ–æ–Ω–æ–º', fontsize=16, fontweight='bold')
    ax.legend(fontsize=12)
    ax.grid(True, alpha=0.3)

    plt.tight_layout()
    plt.show()


# 2. –ö—Ä–∞—Å–∏–≤–∏–π scatter plot
def create_beautiful_scatter():
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    n = 200
    x = np.random.randn(n)
    y = 2 * x + np.random.randn(n) * 0.5
    colors = np.random.rand(n)
    sizes = 1000 * np.random.rand(n)

    fig, ax = plt.subplots(figsize=(10, 8))

    scatter = ax.scatter(x, y, c=colors, s=sizes, alpha=0.6, cmap='plasma', edgecolors='black', linewidth=0.5)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ—ó —Ç—Ä–µ–Ω–¥—É
    z = np.polyfit(x, y, 1)
    p = np.poly1d(z)
    ax.plot(x, p(x), "r--", alpha=0.8, linewidth=2, label=f'–¢—Ä–µ–Ω–¥: y = {z[0]:.2f}x + {z[1]:.2f}')

    ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=14, fontweight='bold')
    ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=14, fontweight='bold')
    ax.set_title('Scatter Plot –∑ –∫–æ–ª—å–æ—Ä–æ–≤–æ—é –ø–∞–ª—ñ—Ç—Ä–æ—é', fontsize=16, fontweight='bold')
    ax.legend(fontsize=12)

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó —à–∫–∞–ª–∏
    cbar = plt.colorbar(scatter)
    cbar.set_label('–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–ª—å–æ—Ä—É', fontsize=12)

    plt.tight_layout()
    plt.show()


# 3. –ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞ –∑ –µ—Ñ–µ–∫—Ç–∞–º–∏
def create_stylish_pie_chart():
    sizes = [25, 30, 15, 20, 10]
    labels = ['–ü—Ä–æ–¥—É–∫—Ç A', '–ü—Ä–æ–¥—É–∫—Ç B', '–ü—Ä–æ–¥—É–∫—Ç C', '–ü—Ä–æ–¥—É–∫—Ç D', '–ü—Ä–æ–¥—É–∫—Ç E']
    colors = ['#FF9999', '#66B2FF', '#99FF99', '#FFCC99', '#FF99CC']
    explode = (0.1, 0, 0, 0.1, 0)  # –≤–∏–¥—ñ–ª–µ–Ω–Ω—è —Å–µ–∫—Ü—ñ–π

    fig, ax = plt.subplots(figsize=(10, 8))

    wedges, texts, autotexts = ax.pie(sizes, explode=explode, labels=labels, colors=colors,
                                      autopct='%1.1f%%', shadow=True, startangle=90,
                                      textprops={'fontsize': 12, 'fontweight': 'bold'})

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—ñ–Ω—ñ —Ç–∞ –µ—Ñ–µ–∫—Ç—ñ–≤
    for autotext in autotexts:
        autotext.set_color('white')
        autotext.set_fontweight('bold')

    ax.set_title('–†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–¥–∞–∂—ñ–≤ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏', fontsize=16, fontweight='bold', pad=20)

    plt.tight_layout()
    plt.show()


# 4. Heatmap –∑ seaborn
def create_correlation_heatmap():
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    data = np.random.randn(10, 12)
    months = ['–°—ñ—á', '–õ—é—Ç', '–ë–µ—Ä', '–ö–≤—ñ', '–¢—Ä–∞', '–ß–µ—Ä',
              '–õ–∏–ø', '–°–µ—Ä', '–í–µ—Ä', '–ñ–æ–≤', '–õ–∏—Å', '–ì—Ä—É']
    years = [f'–†—ñ–∫ {i}' for i in range(2014, 2024)]

    df = pd.DataFrame(data, columns=months, index=years)

    plt.figure(figsize=(12, 8))

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è heatmap
    sns.heatmap(df, annot=True, cmap='RdYlBu_r', center=0,
                square=True, linewidths=0.5, cbar_kws={"shrink": 0.8})

    plt.title('–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –¥–∞–Ω–∏—Ö –∑–∞ —Ä–æ–∫–∞–º–∏ —Ç–∞ –º—ñ—Å—è—Ü—è–º–∏', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('–ú—ñ—Å—è—Ü—ñ', fontsize=14, fontweight='bold')
    plt.ylabel('–†–æ–∫–∏', fontsize=14, fontweight='bold')

    plt.tight_layout()
    plt.show()


# 5. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ Plotly
def create_interactive_plot():
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    x = np.linspace(-5, 5, 100)
    y1 = np.sin(x)
    y2 = np.cos(x)
    y3 = np.tan(x / 2)

    fig = go.Figure()

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ª—ñ–Ω—ñ–π
    fig.add_trace(go.Scatter(x=x, y=y1, mode='lines', name='sin(x)',
                             line=dict(color='red', width=3)))
    fig.add_trace(go.Scatter(x=x, y=y2, mode='lines', name='cos(x)',
                             line=dict(color='blue', width=3)))
    fig.add_trace(go.Scatter(x=x, y=y3, mode='lines', name='tan(x/2)',
                             line=dict(color='green', width=3)))

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title='–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó',
        title_font_size=20,
        xaxis_title='X –∑–Ω–∞—á–µ–Ω–Ω—è',
        yaxis_title='Y –∑–Ω–∞—á–µ–Ω–Ω—è',
        font=dict(size=14),
        hovermode='x unified',
        template='plotly_dark'
    )

    fig.show()


# 6. 3D –ø–æ–≤–µ—Ä—Ö–Ω—è
def create_3d_surface():
    x = np.linspace(-5, 5, 50)
    y = np.linspace(-5, 5, 50)
    X, Y = np.meshgrid(x, y)
    Z = np.sin(np.sqrt(X ** 2 + Y ** 2))

    fig = go.Figure(data=[go.Surface(z=Z, x=X, y=Y, colorscale='Viridis')])

    fig.update_layout(
        title='3D –ø–æ–≤–µ—Ä—Ö–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó sin(‚àö(x¬≤ + y¬≤))',
        title_font_size=20,
        scene=dict(
            xaxis_title='X –≤—ñ—Å—å',
            yaxis_title='Y –≤—ñ—Å—å',
            zaxis_title='Z –≤—ñ—Å—å'
        ),
        font=dict(size=14)
    )

    fig.show()


# 7. –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –ø—ñ–¥–≥—Ä–∞—Ñ—ñ–∫–∞–º–∏
def create_subplots_dashboard():
    fig = make_subplots(
        rows=2, cols=2,
        subplot_titles=('–õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫', '–ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞', 'Box plot', 'Scatter plot'),
        specs=[[{"secondary_y": True}, {}],
               [{}, {}]]
    )

    # –î–∞–Ω—ñ
    x = np.linspace(0, 10, 50)
    y1 = np.sin(x)
    y2 = np.cos(x)
    data = np.random.randn(100)

    # 1. –õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫
    fig.add_trace(go.Scatter(x=x, y=y1, name='sin(x)'), row=1, col=1)
    fig.add_trace(go.Scatter(x=x, y=y2, name='cos(x)'), row=1, col=1, secondary_y=True)

    # 2. –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞
    fig.add_trace(go.Histogram(x=data, name='–†–æ–∑–ø–æ–¥—ñ–ª'), row=1, col=2)

    # 3. Box plot
    fig.add_trace(go.Box(y=data, name='Box plot'), row=2, col=1)

    # 4. Scatter plot
    fig.add_trace(go.Scatter(x=np.random.randn(50), y=np.random.randn(50),
                             mode='markers', name='–¢–æ—á–∫–∏'), row=2, col=2)

    fig.update_layout(height=600, title_text="–î–∞—à–±–æ—Ä–¥ –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –≥—Ä–∞—Ñ—ñ–∫—ñ–≤")
    fig.show()


# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ—É–Ω–∫—Ü—ñ–π
if __name__ == "__main__":
    print("üé® –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–∞—Å–∏–≤–∏—Ö –≥—Ä–∞—Ñ—ñ–∫—ñ–≤...")

    print("\n1. –õ—ñ–Ω—ñ–π–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –∑ –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º:")
    create_gradient_line_plot()

    print("\n2. Scatter plot:")
    create_beautiful_scatter()

    print("\n3. –ö—Ä—É–≥–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞:")
    create_stylish_pie_chart()

    print("\n4. –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞:")
    create_correlation_heatmap()

    print("\n5. –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ (Plotly):")
    create_interactive_plot()

    print("\n6. 3D –ø–æ–≤–µ—Ä—Ö–Ω—è:")
    create_3d_surface()

    print("\n7. –ö–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–π –¥–∞—à–±–æ—Ä–¥:")
    create_subplots_dashboard()

    print("\n‚úÖ –í—Å—ñ –≥—Ä–∞—Ñ—ñ–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")


# –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
def quick_beautiful_plot(x_data, y_data, title="–ö—Ä–∞—Å–∏–≤–∏–π –≥—Ä–∞—Ñ—ñ–∫", x_label="X", y_label="Y"):
    """–®–≤–∏–¥–∫–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É"""
    plt.figure(figsize=(10, 6))
    plt.plot(x_data, y_data, linewidth=3, color='#2E86C1', marker='o', markersize=6,
             markerfacecolor='#F39C12', markeredgecolor='black', markeredgewidth=1)

    plt.title(title, fontsize=16, fontweight='bold', pad=20)
    plt.xlabel(x_label, fontsize=14, fontweight='bold')
    plt.ylabel(y_label, fontsize=14, fontweight='bold')
    plt.grid(True, alpha=0.3, linestyle='--')

    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—Ä–∞–¥—ñ—î–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω—É
    ax = plt.gca()
    ax.set_facecolor('#F8F9FA')

    plt.tight_layout()
    plt.show()

# –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó:
# x = np.linspace(0, 10, 20)
# y = x**2
# quick_beautiful_plot(x, y, "–ö–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è", "X –∑–Ω–∞—á–µ–Ω–Ω—è", "Y = X¬≤")